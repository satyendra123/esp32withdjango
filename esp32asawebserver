# we can also use the esp32 as a web server means suppose that if i hit the api from postman i will get the response from the esp32. like if i hit the api 192.168.1.50:8000/temperature/ then it gives me the temperature value and when i hit the api 192.168.1.50:8000/humidity/ then it gives me the humidity data
#include <Arduino.h>
#include <WiFi.h>
#include <WebServer.h>
#include <ArduinoJson.h>
#include <DHT.h>

const char *SSID = "YOUR_SSID";
const char *PWD = "YOUR_PASSWORD";

// Replace with your DHT sensor type and pin
#define DHTPIN 4  // GPIO pin where the DHT sensor is connected
#define DHTTYPE DHT11  // DHT 11 or DHT22

DHT dht(DHTPIN, DHTTYPE);

WebServer server(80);

StaticJsonDocument<250> jsonDocument;
char buffer[250];

void setup_routing() {
  server.on("/temperature", HTTP_POST, getTemperature);
  server.on("/humidity", HTTP_POST, getHumidity);

  server.begin();
}

void create_json(const char *tag, float value, const char *unit) {
  jsonDocument.clear();
  jsonDocument["type"] = tag;
  jsonDocument["value"] = value;
  jsonDocument["unit"] = unit;
  serializeJson(jsonDocument, buffer);
}

void getTemperature() {
  Serial.println("Get temperature");
  float temperature = dht.readTemperature();
  if (isnan(temperature)) {
    server.send(500, "application/json", "{\"error\":\"Failed to read temperature\"}");
    return;
  }
  create_json("temperature", temperature, "°C");
  server.send(200, "application/json", buffer);
}

void getHumidity() {
  Serial.println("Get humidity");
  float humidity = dht.readHumidity();
  if (isnan(humidity)) {
    server.send(500, "application/json", "{\"error\":\"Failed to read humidity\"}");
    return;
  }
  create_json("humidity", humidity, "%");
  server.send(200, "application/json", buffer);
}

void setup() {
  Serial.begin(115200);

  Serial.print("Connecting to Wi-Fi");
  WiFi.begin(SSID, PWD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }

  Serial.print("Connected! IP Address: ");
  Serial.println(WiFi.localIP());

  dht.begin();
  setup_routing();
}

void loop() {
  server.handleClient();
}

// ESP32 ko hum server bhi bana sakte hai. aur ye humara micropython hai so hum isme hum flask ki jagah hume microdot ka use karna padhta hai. microdot ka use hum server banane ke liye kar sakte hai
import network
from machine import Pin
import dht
import ujson
from microdot import Microdot

# Replace with your Wi-Fi credentials
SSID = 'YOUR_SSID'
PASSWORD = 'YOUR_PASSWORD'

# Connect to Wi-Fi
def connect_to_wifi():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.connect(SSID, PASSWORD)
    while not wlan.isconnected():
        pass
    print('Connected to Wi-Fi')
    print('IP Address:', wlan.ifconfig()[0])

# Initialize DHT sensor
dht_pin = Pin(4)
dht_sensor = dht.DHT11(dht_pin)

app = Microdot()

@app.route('/temperature', methods=['POST'])
def get_temperature(request):
    dht_sensor.measure()
    temperature = dht_sensor.temperature()
    response = {'type': 'temperature', 'value': temperature, 'unit': '°C'}
    return ujson.dumps(response), 200, {'Content-Type': 'application/json'}

@app.route('/humidity', methods=['POST'])
def get_humidity(request):
    dht_sensor.measure()
    humidity = dht_sensor.humidity()
    response = {'type': 'humidity', 'value': humidity, 'unit': '%'}
    return ujson.dumps(response), 200, {'Content-Type': 'application/json'}

# Main program
connect_to_wifi()
app.run(host='0.0.0.0', port=80)

#Note- so agar hum aisa kar sakte hai to means apne esp32 ko hi server bana sakte hai to hum directly without any third party server jaise flask or django python ka use kiye kar sakte hai. means hum directly react js se hit marenge aur hume esp32 data send kar dega react js me. kuch is tarah se
import React, { useState } from 'react';
import axios from 'axios';

const App = () => {
  const [temperature, setTemperature] = useState(null);
  const [humidity, setHumidity] = useState(null);

  const fetchTemperature = async () => {
    try {
      const response = await axios.post('http://<your-esp32-ip>/temperature');
      setTemperature(response.data.value);
    } catch (error) {
      console.error('Error fetching temperature data:', error);
    }
  };

  const fetchHumidity = async () => {
    try {
      const response = await axios.post('http://<your-esp32-ip>/humidity');
      setHumidity(response.data.value);
    } catch (error) {
      console.error('Error fetching humidity data:', error);
    }
  };

  return (
    <div>
      <h1>ESP32 DHT Sensor Data</h1>
      <div>
        <button onClick={fetchTemperature}>Get Temperature</button>
        {temperature !== null && <p>Temperature: {temperature} °C</p>}
      </div>
      <div>
        <button onClick={fetchHumidity}>Get Humidity</button>
        {humidity !== null && <p>Humidity: {humidity} %</p>}
      </div>
    </div>
  );
};

export default App;
